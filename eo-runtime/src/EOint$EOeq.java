
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5f50eb 2023-08-23T18:33:26) on 2023-08-24T11:58:23.295065Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import java.util.concurrent.atomic.AtomicBoolean;

// <o abstract="" ancestors="1" line="30" loc="Φ.org.eolang.int$eq" name="int$eq" original-name="eq" parent="int" pos="2"> 
//   <o line="31" loc="Φ.org.eolang.int$eq.x" name="x" pos="3"/>
//   <o base=".if" line="32" loc="Φ.org.eolang.int$eq.φ" name="@" pos="4"> 
//     <o base=".and" line="33" loc="Φ.org.eolang.int$eq.φ.ρ" pos="6"> 
//       <o base=".eq" line="34" loc="Φ.org.eolang.int$eq.φ.ρ.ρ" pos="8"> 
//         <o base="self-as-bytes" cut="1" line="35" loc="Φ.org.eolang.int$eq.φ.ρ.ρ.ρ" ref="35"/>
//         <o base="zero-as-bytes" cut="0" line="36" loc="Φ.org.eolang.int$eq.φ.ρ.ρ.α0" ref="36"/>
//       </o>
//       <o base=".eq" line="37" loc="Φ.org.eolang.int$eq.φ.ρ.α0" pos="8"> 
//         <o base="x-as-bytes" cut="1" line="38" loc="Φ.org.eolang.int$eq.φ.ρ.α0.ρ" ref="38"/>
//         <o base="zero-as-bytes" line="39" loc="Φ.org.eolang.int$eq.φ.ρ.α0.α0" pos="10" ref="36"/>
//       </o>
//     </o>
//     <o base=".eq" line="40" loc="Φ.org.eolang.int$eq.φ.α0" pos="6"> 
//       <o base=".as-bytes" line="41" loc="Φ.org.eolang.int$eq.φ.α0.ρ" pos="13"> 
//         <o base=".neg" line="41" loc="Φ.org.eolang.int$eq.φ.α0.ρ.ρ" pos="9"> 
//           <o base="^" line="41" loc="Φ.org.eolang.int$eq.φ.α0.ρ.ρ.ρ" pos="8"/>
//         </o>
//       </o>
//       <o base=".as-bytes" line="42" loc="Φ.org.eolang.int$eq.φ.α0.α0" pos="13"> 
//         <o base=".neg" line="42" loc="Φ.org.eolang.int$eq.φ.α0.α0.ρ" pos="9"> 
//           <o base="x" line="42" loc="Φ.org.eolang.int$eq.φ.α0.α0.ρ.ρ" pos="8" ref="31"/>
//         </o>
//       </o>
//     </o>
//     <o base=".eq" line="43" loc="Φ.org.eolang.int$eq.φ.α1" pos="6"> 
//       <o base="self-as-bytes" line="44" loc="Φ.org.eolang.int$eq.φ.α1.ρ" pos="8" ref="35"/>
//       <o base="x-as-bytes" line="45" loc="Φ.org.eolang.int$eq.φ.α1.α0" pos="8" ref="38"/>
//     </o>
//   </o>
//   <o base=".as-bytes" const="" line="35" loc="Φ.org.eolang.int$eq.self-as-bytes" name="self-as-bytes" pos="11"> 
//     <o base="^" line="35" loc="Φ.org.eolang.int$eq.self-as-bytes.ρ" pos="10"/>
//   </o>
//   <o base="org.eolang.bytes" const="" data="bytes" line="36" loc="Φ.org.eolang.int$eq.zero-as-bytes" name="zero-as-bytes" pos="10">00 00 00 00 00 00 00 00</o>
//   <o base=".as-bytes" const="" line="38" loc="Φ.org.eolang.int$eq.x-as-bytes" name="x-as-bytes" pos="11"> 
//     <o base="x" line="38" loc="Φ.org.eolang.int$eq.x-as-bytes.ρ" pos="10" ref="31"/>
//   </o>
// </o>
@XmirObject(name = "int$eq", oname = "eq", source = "/home/tardis3/eo/eo-runtime/src/main/eo/org/eolang/int.eo")
public final class EOint$EOeq extends PhDefault {
    
  public EOint$EOeq(final Phi sigma) {
    super(sigma);
    this.add("x", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = new PhMethod(rho, "self-as-bytes");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eq");
        ret_base_base = new PhLocated(ret_base_base, 34, 8, "Φ.org.eolang.int$eq.φ.ρ.ρ");
      ret_base_base = new PhCopy(ret_base_base);
        Phi ret_base_base_1 = new PhMethod(rho, "zero-as-bytes");
        ret_base_base = new PhWith(ret_base_base, 0, ret_base_base_1);
      Phi ret_base = new PhMethod(ret_base_base, "and");
        ret_base = new PhLocated(ret_base, 33, 6, "Φ.org.eolang.int$eq.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base = new PhMethod(rho, "x-as-bytes");
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "eq");
          ret_base_1 = new PhLocated(ret_base_1, 37, 8, "Φ.org.eolang.int$eq.φ.ρ.α0");
        ret_base_1 = new PhCopy(ret_base_1);
          Phi ret_base_1_1 = new PhMethod(rho, "zero-as-bytes");
            ret_base_1_1 = new PhLocated(ret_base_1_1, 39, 10, "Φ.org.eolang.int$eq.φ.ρ.α0.α0");
          ret_base_1 = new PhWith(ret_base_1, 0, ret_base_1_1);
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "if");
        ret = new PhLocated(ret, 32, 4, "Φ.org.eolang.int$eq.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base_base = new PhMethod(rho, "ρ");
          ret_1_base_base_base = new PhLocated(ret_1_base_base_base, 41, 8, "Φ.org.eolang.int$eq.φ.α0.ρ.ρ.ρ");
        Phi ret_1_base_base = new PhMethod(ret_1_base_base_base, "neg");
          ret_1_base_base = new PhLocated(ret_1_base_base, 41, 9, "Φ.org.eolang.int$eq.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "as-bytes");
          ret_1_base = new PhLocated(ret_1_base, 41, 13, "Φ.org.eolang.int$eq.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "eq");
          ret_1 = new PhLocated(ret_1, 40, 6, "Φ.org.eolang.int$eq.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base_base = new PhMethod(rho, "x");
            ret_1_1_base_base = new PhLocated(ret_1_1_base_base, 42, 8, "Φ.org.eolang.int$eq.φ.α0.α0.ρ.ρ");
          Phi ret_1_1_base = new PhMethod(ret_1_1_base_base, "neg");
            ret_1_1_base = new PhLocated(ret_1_1_base, 42, 9, "Φ.org.eolang.int$eq.φ.α0.α0.ρ");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "as-bytes");
            ret_1_1 = new PhLocated(ret_1_1, 42, 13, "Φ.org.eolang.int$eq.φ.α0.α0");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = new PhMethod(rho, "self-as-bytes");
          ret_2_base = new PhLocated(ret_2_base, 44, 8, "Φ.org.eolang.int$eq.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "eq");
          ret_2 = new PhLocated(ret_2, 43, 6, "Φ.org.eolang.int$eq.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new PhMethod(rho, "x-as-bytes");
            ret_2_1 = new PhLocated(ret_2_1, 45, 8, "Φ.org.eolang.int$eq.φ.α1.α0");
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("self-as-bytes", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "ρ");
        ret_base = new PhLocated(ret_base, 35, 10, "Φ.org.eolang.int$eq.self-as-bytes.ρ");
      Phi ret = new PhMethod(ret_base, "as-bytes");
        ret = new PhLocated(ret, 35, 11, "Φ.org.eolang.int$eq.self-as-bytes");
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("zero-as-bytes", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOorg.EOeolang.EObytes(Phi.Φ);
        ret = new PhLocated(ret, 36, 10, "Φ.org.eolang.int$eq.zero-as-bytes");
        ret = new PhWith(ret, "Δ", new Data.Value<>(new byte[] {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00}));
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("x-as-bytes", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "x");
        ret_base = new PhLocated(ret_base, 38, 10, "Φ.org.eolang.int$eq.x-as-bytes.ρ");
      Phi ret = new PhMethod(ret_base, "as-bytes");
        ret = new PhLocated(ret, 38, 11, "Φ.org.eolang.int$eq.x-as-bytes");
      ret = new PhConst(ret);
      return ret;
    })));
  }
}
