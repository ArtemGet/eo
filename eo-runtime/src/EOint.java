
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5f50eb 2023-08-23T18:33:26) on 2023-08-24T11:58:23.295065Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import java.util.concurrent.atomic.AtomicBoolean;

// <o abstract="" line="29" loc="Φ.org.eolang.int" name="int" original-name="int" pos="0"> 
//   <o base="int$eq" cut="0" line="30" loc="Φ.org.eolang.int.eq" name="eq" pos="2" ref="30"/>
//   <o base="int$lt" cut="25" line="47" loc="Φ.org.eolang.int.lt" name="lt" pos="2" ref="47"/>
//   <o base="int$lte" cut="33" line="56" loc="Φ.org.eolang.int.lte" name="lte" pos="2" ref="56"/>
//   <o atom="bool" base="int$gt" cut="39" line="61" loc="Φ.org.eolang.int.gt" name="gt" pos="2" ref="61"/>
//   <o base="int$gte" cut="41" line="64" loc="Φ.org.eolang.int.gte" name="gte" pos="2" ref="64"/>
//   <o base="int$neg" cut="47" line="69" loc="Φ.org.eolang.int.neg" name="neg" pos="2" ref="69"/>
//   <o atom="int" base="int$plus" cut="51" line="73" loc="Φ.org.eolang.int.plus" name="plus" pos="2" ref="73"/>
//   <o base="int$minus" cut="53" line="76" loc="Φ.org.eolang.int.minus" name="minus" pos="2" ref="76"/>
//   <o atom="int" base="int$times" cut="85" line="96" loc="Φ.org.eolang.int.times" name="times" pos="2" ref="96"/>
//   <o atom="int" base="int$div" cut="87" line="99" loc="Φ.org.eolang.int.div" name="div" pos="2" ref="99"/>
//   <o atom="bytes" base="int$as-bytes" cut="89" line="102" loc="Φ.org.eolang.int.as-bytes" name="as-bytes" pos="2" ref="102"/>
// </o>
@XmirObject(name = "int", oname = "int", source = "/home/tardis3/eo/eo-runtime/src/main/eo/org/eolang/int.eo")
public final class EOint extends PhDefault {
  
  private final AtomicBoolean initialized = new AtomicBoolean(false);  
  public EOint(final Phi sigma) {
    super(sigma);
    this.add("Δ", new AtFree(new AtSimple(), this.initialized));
    this.add("eq", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOeq(rho);
        ret = new PhLocated(ret, 30, 2, "Φ.org.eolang.int.eq");
      return ret;
    })));
    this.add("lt", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOlt(rho);
        ret = new PhLocated(ret, 47, 2, "Φ.org.eolang.int.lt");
      return ret;
    })));
    this.add("lte", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOlte(rho);
        ret = new PhLocated(ret, 56, 2, "Φ.org.eolang.int.lte");
      return ret;
    })));
    this.add("gt", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOgt(rho);
        ret = new PhLocated(ret, 61, 2, "Φ.org.eolang.int.gt");
      return ret;
    })));
    this.add("gte", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOgte(rho);
        ret = new PhLocated(ret, 64, 2, "Φ.org.eolang.int.gte");
      return ret;
    })));
    this.add("neg", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOneg(rho);
        ret = new PhLocated(ret, 69, 2, "Φ.org.eolang.int.neg");
      return ret;
    })));
    this.add("plus", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOplus(rho);
        ret = new PhLocated(ret, 73, 2, "Φ.org.eolang.int.plus");
      return ret;
    })));
    this.add("minus", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOminus(rho);
        ret = new PhLocated(ret, 76, 2, "Φ.org.eolang.int.minus");
      return ret;
    })));
    this.add("times", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOtimes(rho);
        ret = new PhLocated(ret, 96, 2, "Φ.org.eolang.int.times");
      return ret;
    })));
    this.add("div", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOdiv(rho);
        ret = new PhLocated(ret, 99, 2, "Φ.org.eolang.int.div");
      return ret;
    })));
    this.add("as-bytes", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint$EOas_bytes(rho);
        ret = new PhLocated(ret, 102, 2, "Φ.org.eolang.int.as-bytes");
      return ret;
    })));
  }
  @Override
  public int hashCode() {
    if (this.initialized.get()) {
      return this.attr("Δ").get().hashCode();
    } else {
      return this.vertex;
    }
  }
  @Override
  public boolean equals(final Object obj) {
    return this.attr("Δ").get().equals(obj);
  }
}
