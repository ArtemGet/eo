# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+version 0.0.0

[] > float
  # Tests that $ = x
  [x] > eq
    eq. > @
      ^.as-bytes
      x.as-bytes

  # Tests that $ < x
  [x] > lt
    gt. > @
      plus.
        x
        neg.
          ^
      0.0

  # Tests that $ ≤ x
  [x] > lte
    not. > @
      ^.gt x

  # Tests that $ > x
  [x] > gt /bool

  # Tests that $ ≥ x
  [x] > gte
    not. > @
      ^.lt x

  # Multiplication of $ and x
  [x...] > times /float

  # Sum of $ and x
  [x...] > plus /float

  # Negation of $
  [] > neg
    ^.times -1.0 > @

  # Difference between $ and x
  [x...] > minus
    mapped. > x-neg
      list
        x
      [element]
        neg. > @
          element
    ^.plus > @
      ...x-neg

  # Quotient of the division of $ by x
  [x...] > div /float

  # Converts this to bytes
  [] > as-bytes /bytes

  # Converts this to hash
  [] > as-hash
    as-int. > @
      xor.
        as-bytes
        right.
          as-bytes
          32

  # @todo #1253:30min. Allow division by float zero in EOfloat$EOdiv for being
  #  able to make float.nan, float.positive-infinity and float.negative-infinity
  #  decorated 0.0.div 0.0, 1.0.div 0.0 and -1.0.div 0.0 accordingly

  # @todo #1253:30min. Add extra conditions in Data.ToPhi.toPhi() method for
  #  checking if given object is Double.NaN, Double.POSITIVE_INFINITY or
  #  Double.NEGATIVE_INFINITY and convert them to Phi objects (EOfloat$EOnan,
  #  EOfloat$EOpositive_infinity and EOfloat$EOnegative-infinity)

  # @todo #1253:30min. After allowing division by zero float in EOfloat$EOdiv
  #  make float.nan, float.positive-infinity and float.negative-infinity
  #  decorated 0.0.div 0.0, 1.0.div 0.0 and -1.0.div 0.0 accordingly
  # Not a number
  [] > nan
    # Tests that $ = x
    [x] > eq
      FALSE > @

    # Tests that $ ≠ x
    [x] > neq
      TRUE > @

    # Tests that $ < x
    [x] > lt
      FALSE > @

    # Tests that $ ≤ x
    [x] > lte
      FALSE > @

    # Tests that $ > x
    [x] > gt
      FALSE > @

    # Tests that $ ≥ x
    [x] > gte
      FALSE > @

    # Multiplication of $ and x
    [x] > times
      ^ > @

    # Sum of $ and x
    [x] > plus
      ^ > @

    # Negation of $
    [] > neg
      ^ > @

    # Sign of $ (-1.0, 0.0, or 1.0)
    [] > signum
      ^ > @

    # Difference between $ and x
    [x] > minus
      ^ > @

    # x'th power of $
    [x] > pow
      ^ > @

    # Quotient of the division of $ by x
    [x] > div
      ^ > @

    # Absolute value of $ (i.e., with no sign)
    [] > abs
      ^ > @

    # Converts this to bytes
    [] > as-bytes
      7F-C0-00-00 > @

    # Converts this to int
    [] > as-int
      [] > @
        "You can't convert NaN to int" > msg

    # Converts this to string
    [] > as-string
      "NaN" > @

  # Positive infinity
  [] > positive-infinity
    # Tests that $ = x
    [x] > eq
      eq. > @
        ^.as-bytes
        x.as-bytes

    # Tests that $ ≠ x
    [x] > neq
      (^.eq x).not > @

    # Tests that $ < x
    [x] > lt
      FALSE > @

    # Tests that $ ≤ x
    [x] > lte
      ^.eq x > @

    # Tests that $ > x
    [x] > gt
      not. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          ^.eq x

    # Tests that $ ≥ x
    [x] > gte
      not. > @
        eq.
          x.as-bytes
          ^.^.nan.as-bytes

    # Multiplication of $ and x
    [x] > times
      if. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          x.eq 0.0
        ^.^.nan
        if.
          x.eq ^.^.negative-infinity
          ^.^.negative-infinity
          ^

    # Sum of $ and x
    [x] > plus
      if. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          x.eq ^.^.negative-infinity
        ^.^.nan
        ^

    # Negation of $
    [] > neg
      ^.^.negative-infinity > @

    # Sign of $ (-1.0, 0.0, or 1.0)
    [] > signum
      1.0 > @

    # Difference between $ and x
    [x] > minus
      ^.plus (x.neg) > @

    # x'th power of $
    [x] > pow
      if. > @
        x.gt 0.0
        ^
        if.
          x.lt 0.0
          0.0
          if.
            x.eq 0.0
            1.0
            ^.^.nan

    # Quotient of the division of $ by x
    [x] > div
      if. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          x.eq ^.^.negative-infinity
          x.eq ^
        ^.^.nan
        ^

    # Remainder of $
    [] > mod
      ^.^.nan > @

    # Absolute value of $ (i.e., with no sign)
    [] > abs
      ^ > @

    # Converts this to bytes
    [] > as-bytes
      7F-80-00-00 > @

    # Converts this to int
    [] > as-int
      [] > @
        "You can not convert positive infinity to int" > msg

    # Converts this to string
    [] > as-string
      "+∞" > @

  # Negative infinity
  [] > negative-infinity
    # Tests that $ = x
    [x] > eq
      eq. > @
        ^.as-bytes
        x.as-bytes

    # Tests that $ ≠ x
    [x] > neq
      (^.eq x).not > @

    # Tests that $ < x
    [x] > lt
      not. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          ^.eq x

    # Tests that $ ≤ x
    [x] > lte
      not. > @
        eq.
          x.as-bytes
          ^.^.nan.as-bytes

    # Tests that $ > x
    [x] > gt
      FALSE > @

    # Tests that $ ≥ x
    [x] > gte
      ^.eq x > @

    # Multiplication of $ and x
    [x] > times
      if. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          x.eq 0.0
        ^.^.nan
        if.
          x.eq ^
          ^.^.positive-infinity
          ^

    # Sum of $ and x
    [x] > plus
      if. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          x.eq ^.^.positive-infinity
        ^.^.nan
        ^

    # Negation of $
    [] > neg
      ^.^.positive-infinity > @

    # Sign of $ (-1.0, 0.0, or 1.0)
    [] > signum
      -1.0 > @

    # Difference between $ and x
    [x] > minus
      ^.plus (x.neg) > @

    # x'th power of $
    [x] > pow
      if. > @
        x.lt 0.0
        0.0
        if.
          x.eq 0.0
          1
          if.
            x.gt 0.0
            if.
              not-int x
              ^
              if.
                (x.as-int.mod 2).eq 0
                ^.^.positive-infinity
                ^
            ^.^.nan

      [x] > not-int
        x.as-int > as-integer!
        and. > @
          as-integer.as-float.lt x
          (as-integer.plus 1).as-float.gt x

    # Quotient of the division of $ by x
    [x] > div
      if. > @
        or.
          x.as-bytes.eq (^.^.nan.as-bytes)
          x.eq ^
          x.eq ^.^.positive-infinity
        ^.^.nan
        ^

    # Remainder of $
    [] > mod
      ^.^.nan > @

    # Absolute value of $ (i.e., with no sign)
    [] > abs
      ^.^.positive-infinity > @

    # Converts this to bytes
    [] > as-bytes
      FF-80-00-00 > @

    # Converts this to int
    [] > as-int
      [] > @
        "You can not convert negative infinity to int" > msg

    # Converts this to string
    [] > as-string
      "-∞" > @
