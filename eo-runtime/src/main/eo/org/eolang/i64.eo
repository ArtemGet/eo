# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# The 64 bits signed integer.
# Here `num` must be a `number` object.
# If `num` is not an integer - it can't be converted to `i64`
# and an `error` object is returned.
[num] > i64
  if. > @
    num.is-integer
    validated num
    error
      sprintf
        "Can't create i64 from not integer number, number is %f"
        * num

  # Validated i64 number.
  # Decorates `num` which must be an integer number.
  #
  # Attention! The object is for internal usage only, please
  # don't use the object programmatically outside of `i64` object.
  [num] > validated
    as-number > @
    num > as-number
    i64 as-number.neg > neg

    # Extract bytes from i64 number.
    # Please not that bytes representations of i64 and number
    # are different.
    [] > as-bytes /bytes

    # Returns `true` if `$` = `x` in terms of bytes.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    ^.as-number.eq x.as-i64.as-number > [x] > eq

    # Sum of `$` and `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    [x] > plus
      i64 > @
        ^.as-number.plus x.as-i64.as-number

    # Subtraction between `$` and `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    [x] > minus
      i64 > @
        ^.as-number.minus x.as-i64.as-number

    # Multiplication of `$` and `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    [x] > times
      i64 > @
        ^.as-number.times x.as-i64.as-number

    # Quotient of the division of `$` by `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64` or
    # if `x` is equal to 0.
    [x] > div
      x.as-i64.as-number > num
      if. > @
        num.eq 0
        error "Can't divide i64 by zero"
        i64
          floor.
            ^.as-number.div num

    # Returns `true` if `$` > `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    ^.as-number.gt x.as-i64.as-number > [x] > gt

    # Returns `true` if `$` >= `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    ^.as-number.gte x.as-i64.as-number > [x] > gte

    # Returns `true` if `$` < `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    ^.as-number.lt x.as-i64.as-number > [x] > lt

    # Returns `true` if `$` <= `x`.
    # Here `x` must be an `i64` object.
    # An `error` is returned if `x` can't be converted to `i64`.
    ^.as-number.lte x.as-i64.as-number > [x] > lte
