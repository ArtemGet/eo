# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+version 0.0.0

# Positive infinity
[] > positive-infinity
  1.0.div 0.0 > @!

  # Tests that $ < x
  [x] > lt
    FALSE > @

  # Tests that $ â‰¤ x
  [x] > lte
    ^.eq x > @

  # Tests that $ > x
  [x] > gt
    not. > @
      or.
        x.as-bytes.eq (nan.as-bytes)
        ^.eq x

  # Tests that $ â‰¥ x
  [x] > gte
    not. > @
      eq.
        x.as-bytes
        nan.as-bytes

  # Multiplication of $ and x
  [x...] > times
    ^.as-bytes > pos-inf-as-bytes!

    negative-infinity > neg-inf!
    neg-inf.as-bytes > neg-inf-as-bytes!

    nan > not-a-number!
    not-a-number.as-bytes > nan-as-bytes!

    0.0.as-bytes > zero-as-bytes!

    reduced. > res-bytes!
      list
        x
      pos-inf-as-bytes
      [acc-as-bytes num]
        if. > @
          or.
            acc-as-bytes.eq nan-as-bytes
            eq.
              num.as-bytes > num-as-bytes!
              zero-as-bytes
            num-as-bytes.eq nan-as-bytes
          nan-as-bytes
          if.
            acc-as-bytes.eq neg-inf-as-bytes
            if.
              num-as-bytes.eq neg-inf-as-bytes
              pos-inf-as-bytes
              neg-inf-as-bytes
            if.
              num-as-bytes.eq neg-inf-as-bytes
              neg-inf-as-bytes
              pos-inf-as-bytes

    if. > @
      res-bytes.eq nan-as-bytes
      not-a-number
      if.
        res-bytes.eq pos-inf-as-bytes
        ^
        neg-inf

  # Sum of $ and x
  [x...] > plus
    ^ > pos-inf!
    pos-inf.as-bytes > pos-inf-as-bytes!

    negative-infinity.as-bytes > neg-inf-as-bytes!

    nan > not-a-number!
    not-a-number.as-bytes > nan-as-bytes!

    x.length > x-length!

    [acc-as-bytes nums index] > rec-plus
      if. > @
        index.eq x-length
        acc-as-bytes
        []
          (nums.at index).as-bytes > num-as-bytes!
          if. > @
            or.
              acc-as-bytes.eq nan-as-bytes
              num-as-bytes.eq nan-as-bytes
              num-as-bytes.eq neg-inf-as-bytes
            nan-as-bytes
            rec-plus
              pos-inf-as-bytes
              nums
              index.plus 1

    if. > @
      eq.
        rec-plus
          pos-inf-as-bytes
          x
          0
        nan-as-bytes
      not-a-number
      pos-inf

  # Negation of $
  [] > neg
    negative-infinity > @

  # Difference between $ and x
  [x...] > minus
    ^ > pos-inf!
    pos-inf.as-bytes > pos-inf-as-bytes!

    negative-infinity.as-bytes > neg-inf-as-bytes!

    nan > not-a-number!
    not-a-number.as-bytes > nan-as-bytes!

    reduced. > res-bytes!
      list
        x
      pos-inf-as-bytes
      [acc-as-bytes num]
        if. > @
          or.
            acc-as-bytes.eq nan-as-bytes
            eq.
              num.neg.as-bytes > num-neg-as-bytes!
              neg-inf-as-bytes
            num-neg-as-bytes.eq nan-as-bytes
          nan-as-bytes
          pos-inf-as-bytes

    if. > @
      res-bytes.eq nan-as-bytes
      not-a-number
      ^

  # Quotient of the division of $ by x
  [x...] > div
    ^ > pos-inf!
    pos-inf.as-bytes > pos-inf-as-bytes!

    negative-infinity.as-bytes > neg-inf-as-bytes!

    nan > not-a-number!
    not-a-number.as-bytes > nan-as-bytes!

    reduced. > res-bytes!
      list
        x
      pos-inf-as-bytes
      [acc-as-bytes num]
        if. > @
          or.
            acc-as-bytes.eq nan-as-bytes
            eq.
              num.as-bytes > num-as-bytes!
              pos-inf-as-bytes
            num-as-bytes.eq neg-inf-as-bytes
            num-as-bytes.eq nan-as-bytes
          nan-as-bytes
          pos-inf-as-bytes

    if. > @
      res-bytes.eq nan-as-bytes
      not-a-number
      ^
