# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang
+home https://github.com/objectionary/eo
+version 0.0.0
+alias org.eolang.io.stdout
+alias org.eolang.math.number
+alias org.eolang.hamcrest.assert-that
+junit

[] > makes-array-through-special-syntax
  assert-that > @
    (* 1 2).length
    $.equal-to 2

[] > gets-lengths-of-empty-array-through-special-syntax
  assert-that > @
    *.length
    $.equal-to 0

[] > iterates-with-each
  *
    "one"
    "two"
    "three"
  .each > @
    [i] (stdout i > @)

# check that an empty array's .length equals to zero
[] > empty-array-length
  [elements...] > arr
  assert-that > @
    (arr).elements.length
    $.equal-to 0

# check that array.length works properly for non-empty arrays
[] > non-empty-array-length-test
  [elements...] > arr
  assert-that > @
    (arr "a" "b" "c" "d" "e").elements.length
    $.equal-to 5

[] > array-as-a-bound-attribute-size-0
  * > anArray
  assert-that > @
    anArray.length
    $.equal-to 0

[] > array-as-a-bound-attribute-size-1
  * > anArray
    100
  assert-that > @
    anArray.at 0
    $.equal-to 100

[] > array-as-a-bound-attribute-size-2
  nop > @
    * > anArray
      1
      2
    assert-that
      anArray
      $.array-each
        $.equal-to 1
        $.equal-to 2

# array equal to another array
[] > array-equal-to-another-array
  assert-that > @
    *
      1
      "str"
      "\n"
      22.0
      "друг".as-bytes
      TRUE
    $.is
      $.equal-to
        *
          1
          "str"
          "\n"
          (number (11.times 2)).as-float
          D0-B4-D1-80-D1-83-D0-B3
          FALSE.not

# array not equal to another object by length
[] > array-not-equal-to-another-array-by-length
  assert-that > @
    * 1 2 3
    $.is
      $.not
        $.equal-to
          * 1 2 3 4

# check that varargs eq works
[] > varargs-eq-should-works
  [args...] > a
  [args...] > b
  assert-that > @
    args.
      a
        (number 13).as-float
        "\t"
        "bbt"
    $.equal-to
      args.
        b
          (number 13).as-float
          "\t"
          "bbt"

# nested array equal object should works
[] > nested-array-eq-should-works
  * 1 "2" 3.0 > a
  * 1 "2" ((number 3).as-float) > b
  assert-that > @
    * "w" a
    $.equal-to
      * "w" b

# two different arrays not equal
[] > two-different-arrays-not-equal
  assert-that > @
    * 1 2 3
    $.not
      $.equal-to
        * 1 5 "text"

#two different nested arrays not eq
[] > nested-array-not-eq-should-works
  * 5 "\07" "18" > a
  * 5 "neq" ((number 18).as-string) > b
  assert-that > @
    * "not eq" a
    $.not
      $.equal-to
        * "not eq" b

# check that varargs not eq works
[] > varargs-not-eq-should-works
  [args...] > a
  [args...] > b
  assert-that > @
    args.
      a 1 2 3
    $.not
      $.equal-to
        args.
          b 1 2 "fail"

[] > array-with-in-seq
  [a] > foo
    seq > @
      a.with "hi" > t
      t
  seq > @
    foo
      * 1 2 3
    TRUE

[] > array-with
  assert-that > @
    with.
      * 1 2 3
      "with"
    $.equal-to
      * 1 2 3 "with"

[] > array-without
  assert-that > @
    without.
      * 1 2 3
      1
    $.equal-to
      * 1 3

[] > array-without-complex-case
  [a] > foo
    seq > @
      a.without 0 > t
      t
  assert-that > @
    foo
      * 1 "text" "f"
    $.equal-to
      * "text" "f"

[] > array-without-nested-array
  * 3 2 1 > nested
  assert-that > @
    without.
      * "smthg" 27 nested
      2
    $.equal-to
      * "smthg" 27

[] > array-at-with-error
  assert-that > @
    msg.
      at.
        * 1 2 3 4
        20
    $.is
      $.equal-to
        "Can't at() the 20th element of the array, there are just 4 of them"

[] > concat-array-with-empty-array-1
  * 1 2 3 > a
  * > b
  a.concat b > res
  assert-that > @
    res.length
    $.equal-to 3

[] > concat-array-with-empty-array-2
  * > a
  * 1 2 3 > b
  a.concat b > res
  assert-that > @
    res.length
    $.equal-to 3

[] > concat-array-with-empty-array-3
  * > a
  * > b
  a.concat b > res
  assert-that > @
    res.length
    $.equal-to 0

[] > concat-arrays
  * 1 2 3 > a
  * 100 200 > b
  a.concat b > res
  assert-that > @
    plus.
      res.at 2
      res.at 4
    $.equal-to 203

[] > concat-three-arrays
  * 0 1 2 > a
  * 3 4 > b
  * (* "five" "six") (* "siven") > c
  a.concat (b.concat c) > res
  assert-that > @
    * (res.length) ((res.at 5).at 1)
    $.equal-to
      * 7 "six"
