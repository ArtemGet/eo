# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# Test.
[] > i64-has-valid-bytes
  eq. > @
    (i64 42).as-bytes
    00-00-00-00-00-00-00-2A

# Test.
[] > i64-as-bytes-is-not-equal-to-number-bytes
  not. > @
    eq.
      (i64 234).as-bytes
      234

# Test.
(i64 42).eq 42 > [] > throws-on-comparison-with-not-i64

# Test.
(i64 42).plus 42 > [] > throws-on-addition-with-not-i64

# Test.
(i64 42).minus 42 > [] > throws-on-subtraction-with-not-i64

# Test.
(i64 42).times 42 > [] > throws-on-multiplication-with-not-i64

# Test.
(i64 42).div 42 > [] > throws-on-division-with-not-i64

# Test.
(i64 42).gt 42 > [] > throws-on-checking-greater-with-not-i64

# Test.
(i64 42).gte 42 > [] > throws-on-checking-greater-equal-with-not-i64

# Test.
(i64 42).lt 42 > [] > throws-on-checking-less-with-not-i64

# Test.
(i64 42).lte 42 > [] > throws-on-checking-less-equal-with-not-i64

# Test.
[] > floors-real-number
  eq. > @
    (i64 42.25).as-bytes
    (i64 42).as-bytes

# Test.
[] > i64-less-true
  lt. > @
    i64 10
    i64 50

# Test.
[] > i64-less-equal
  not. > @
    lt.
      i64 10
      i64 10

# Test.
[] > i64-less-false
  not. > @
    lt.
      i64 10
      i64 -5

# Test.
[] > i64-greater-true
  gt. > @
    i64 -200
    i64 -1000

# Test.
[] > i64-greater-false
  not. > @
    gt.
      i64 0
      i64 100

# Test.
[] > i64-greater-equal
  not. > @
    gt.
      i64 0
      i64 0

# Test.
[] > i64-lte-true
  lte. > @
    i64 -200
    i64 -100

# Test.
[] > i64-lte-equal
  lte. > @
    i64 50
    i64 50

# Test.
[] > i64-lte-false
  not. > @
    lte.
      i64 0
      i64 -10

# Test.
[] > i64-gte-true
  gte. > @
    i64 -1000
    i64 -1100

# Test.
[] > i64-gte-equal
  gte. > @
    i64 113
    i64 113

# Test.
[] > i64-gte-false
  not. > @
    gte.
      i64 0
      i64 10

# Test.
[] > i64-equal-to-nan-and-infinites-is-false
  and. > @
    and.
      and.
        and.
          and.
            ((i64 0).eq (i64 nan)).eq false
            ((i64 0).eq (i64 positive-infinity)).eq false
          ((i64 0).eq (i64 negative-infinity)).eq false
        ((i64 42).eq (i64 nan)).eq false
      ((i64 42).eq (i64 positive-infinity)).eq false
    ((i64 42).eq (i64 negative-infinity)).eq false

# Test.
[] > i64-zero-eq-to-i64-zero
  eq. > @
    i64 0
    i64 0

# Test.
[] > i64-eq-true
  eq. > @
    i64 123
    i64 123

# Test.
[] > i64-eq-false
  not. > @
    eq.
      i64 123
      i64 42

# Test
[] > i64-one-plus-i64-one
  eq. > @
    (i64 1).plus (i64 1)
    i64 2

# Test
[] > i64-one-minus-i64-one
  eq. > @
    (i64 1).minus (i64 1)
    i64 0

# Test.
(i64 2).div (i64 0) > [] > throws-on-division-i64-by-i64-zero

# Checks that division by one returns the dividend.
[] > i64-div-by-i64-one
  i64 -235 > dividend
  eq. > @
    dividend.div (i64 1)
    dividend

# Checks div with remainder
[] > i64-div-with-remainder
  eq. > @
    (i64 13).div (i64 -5)
    i64 -2

# Test.
[] > i64-div-less-than-i64-one
  lt. > @
    (i64 1).div (i64 5)
    i64 1

# Test.
[] > i64-multiply-by-zero
  eq. > @
    (i64 1000).times (i64 0)
    i64 0
