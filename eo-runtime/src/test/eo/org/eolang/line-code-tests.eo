# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

[] > line
  memory > mem
    1.plus 0
  seq > @
    mem.write
      mem.plus 1
    mem.write
      mem.plus 2
    mem.write
      mem.plus 3
    mem.write
      mem.plus 4
    mem.write
      mem.plus 5
    mem.write
      mem.plus 6
    mem.write
      mem.plus 7
    mem.write
      mem.plus 8
    mem

[] > line-rst
  memory > mem
    1.plus 0
  nop > @
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EOInt};
    use byteorder::{BigEndian, ReadBytesExt};

    pub fn foo(env: &mut Portal) -> Option<EO> {
       let mut mem = 0 as i64;
           mem=mem+2;
           mem=mem+2;
           mem=mem+2;
           mem=mem+2;
           mem=mem+2;
           mem=mem+2;
           mem=mem+2;
           mem=mem+2;
       return Some(EOInt(mem));
    }
    """
    *
      []

[] > line-4
  1.plus > sum
    2.plus
      3.plus
        4.plus
          5.plus
            6.plus
              7.plus
                8.plus
                  9.plus
                    10.plus
                      11.plus
                        12
  eq. > @
    sum
    78

[] > test-with-mysim
  mysum > res
    1.as-int
    TRUE > @

[] > plus-plus-plus-forms-1
  TRUE > @
  1.plus.plus.plus.plus > complex-plus

[] > plus-plus-plus-forms-2
  TRUE > @
  plus. > complex-plus
    plus.
      plus.
        plus.
          1
