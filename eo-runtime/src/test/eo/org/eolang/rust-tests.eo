# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

[] > rust-creates-object
  QQ.rust > r
    """
    use eo_env::EOEnv;

    pub fn foo(mut _env: EOEnv<'_>) -> i32 {
      println!("Hello world from rust");
      let x = 4.0_f32;
      x.sqrt() as i32
    }
    """
    *
  assert-that > @
    r
    $.equal-to
      2

[] > rust-find-returns-int
  QQ.rust > r
    """
    use eo_env::EOEnv;

    pub fn foo(mut env: EOEnv<'_>) -> i32 {
      env.find("^");
      0
    }
    """
    *
  assert-that > @
    r
    $.equal-to
      0

[] > rust-put-not-fails
  QQ.rust > r
    """
    use eo_env::EOEnv;

    pub fn foo(mut env: EOEnv<'_>) -> i32 {
      env.put(3, &[0x00, 0x1a, 0xEE, 0xf, 0xf3]).unwrap();
      0
    }
    """
    *
  assert-that > @
    r
    $.not
      $.less-than
        0

[] > rust-bind-not-fails
  QQ.rust > insert
    """
    use eo_env::EOEnv;
    pub fn foo(mut env: EOEnv<'_>) -> i32 {
        let v1 = env.find("a") as u32;
        let v2 = env.find("b") as u32;
        env.bind(v1 , v2, "my-att");
        return v1 as i32;
    }
    """
    *
  assert-that > @
    insert
    $.not
      $.less-than
        0

[] > rust-copy-not-fails
  QQ.rust > copy
    """
    use eo_env::EOEnv;
    pub fn foo(mut env: EOEnv<'_>) -> i32 {
        let v = env.find("a") as u32;
        let copy = env.copy(v).unwrap();
        copy as i32
    }
    """
    *
  assert-that > @
    copy
    $.not
      $.less-than
        0

[] > rust-dataize-not-fails
  nop > @
    QQ.rust > dataized
      """
      use eo_env::EOEnv;
      pub fn foo(mut env: EOEnv<'_>) -> i32 {
          let v = env.find("a") as u32;
          let bytes = env.dataize(v).unwrap();
          v as i32
      }
      """
      *
    assert-that
      dataized
      $.not
        $.less-than
          0
