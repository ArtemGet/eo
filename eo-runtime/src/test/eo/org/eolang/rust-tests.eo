# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

[] > rust-returns-positive-int
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};

    pub fn foo(_env: &mut EOEnv) -> Option<EO> {
      println!("Hello world from rust");
      Some(EOInt(2))
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      2

[] > rust-returns-negative-int
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};

    pub fn foo(_env: &mut EOEnv) -> Option<EO> {
      println!("Hello world from rust");
      Some(EOInt(-10))
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      -10

[] > rust-returns-positive-doable
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOFloat};

    pub fn foo(_env: &mut EOEnv) -> Option<EO> {
      Some(EOFloat(1.23456789))
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      1.23456789

[] > rust-returns-negative-doable
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOFloat};

    pub fn foo(_env: &mut EOEnv) -> Option<EO> {
      Some(EOFloat(-1.23456789))
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      -1.23456789

[] > rust-is-byte-array
  QQ.rust > my-bytes
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EORaw};

    pub fn foo(_env: &mut EOEnv) -> Option<EO> {
      Some(
        EORaw(
          Box::from(
            [0x00, 0x1a, 0xEE]
          )
        )
      )
    }
    """
    *
      []
  assert-that > @
    my-bytes
    $.equal-to
      00-1A-EE

[] > rust-find-returns-int
  123 > a
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};

    pub fn foo(env: &mut EOEnv) -> Option<EO> {
      Some(
        EOInt(env.find("$.^.a").unwrap() as i64)
      )
    }
    """
    *
      []
  assert-that > @
    r
    $.not
      $.less-than
        0

[] > rust-returns-vertex
  "content" > book
  QQ.rust > read
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOVertex};

    pub fn foo(env: &mut EOEnv) -> Option<EO> {
      let v = env.find("$.^.book")?;
      Some(EOVertex(v))
    }
    """
    *
      []
  assert-that > @
    read
    $.equal-to
      "content"

[] > rust-is-string
  QQ.rust > content
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOString};

    pub fn foo(_env: &mut EOEnv) -> Option<EO> {
      Some(EOString("Привет world".to_string()))
    }
    """
    *
      []
  assert-that > @
    content
    $.equal-to "Привет world"

[] > rust-invalid-put
  QQ.rust > put
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt, EOError};
    pub fn foo(env: &mut EOEnv) -> Option<EO> {
      env.put(-1i32 as u32, &[0x00, 0x1a, 0xEE, 0xf, 0xf3])?;
      Some(EOError("put failed".to_string()))
    }
    """
    *
      []
  assert-that > @
    try
      []
        put > @
      [e]
        e > @
      nop
    $.string-starts-with "Rust insert failed"

[] > rust-invalid-bind-fails
  1 > a
  2 > b
  QQ.rust > insert
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    pub fn foo(env: &mut EOEnv) -> Option<EO> {
      let v1 = env.find("$.^.a")?;
      let v2 = env.find("$.^.b")?;
      env.bind(v1 , v2, "EO-att")?;
      Some(EOInt(0 as i64))
    }
    """
    *
      []
  assert-that > @
    try
      []
        insert > @
      [e]
        e > @
      nop
    $.string-starts-with "Rust insert failed"

[] > rust-copy-not-fails
  123 > a
  QQ.rust > copy
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOVertex};
    pub fn foo(env: &mut EOEnv) -> Option<EO> {
        let v = env.find("$.^.a")?;
        let copy = env.copy(v)?;
        Some(EOVertex(copy))
    }
    """
    *
      []
  assert-that > @
    copy
    $.equal-to
      123

[] > rust-dataize-not-fails
  1 > a
  QQ.rust > dataized
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    pub fn foo(env: &mut EOEnv) -> Option<EO> {
      let v = env.find("$.^.a")?;
      let _bytes = env.dataize(v)?;
      Some(EOInt(v as i64))
    }
    """
    *
      []
      3
  assert-that > @
    dataized
    $.not
      $.less-than
        0

[] > rust-plus
  5 > a
  10 > b
  QQ.rust > plus
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    use byteorder::{BigEndian, ReadBytesExt};

    pub fn foo(env: &mut EOEnv) -> Option<EO> {
        let a = env.find("$.^.a")?;
        let bytes_a = env.dataize(a).unwrap();
        let a = bytes_a.as_slice().read_i64::<BigEndian>().ok()?;

        let b = env.find("$.^.b")?;
        let bytes_b = env.dataize(b)?;
        let b = bytes_b.as_slice().read_i64::<BigEndian>().ok()?;
        println!("sum 5 + 10 = {}", a + b);

        Some(EOInt(a + b))
    }
    """
    *
      []
      "byteorder:1.4.3"
  assert-that > @
    plus
    $.equal-to 15

[] > rust-error
  QQ.rust > err!
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOError};

    pub fn foo(_env: &mut EOEnv) -> Option<EO> {
      Some(EOError("Custom error".to_string()))
    }
    """
    *
      []
  assert-that > @
    try
      []
        err > @
      [e]
        e > @
      nop
    $.all-of
      $.string-starts-with "Rust insert failed "

[] > rust-put-to-copy
  QQ.rust > data
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOVertex, EOError};

    pub fn foo(env: &mut EOEnv) -> Option<EO> {
      let eobytes = env.find("Q.org.eolang.bytes")?;
      let copy = env.copy(eobytes)?;
      env.put(copy.clone(), &[0x00, 0x1a, 0xEE])?;
      Some(EOVertex(copy))
    }
    """
    *
      []
  assert-that > @
    data
    $.equal-to
      00-1A-EE

[] > rust-bind-to-copy
  [content] > book
  "qwerty" > line
  QQ.rust > applied
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOVertex};

    pub fn foo(env: &mut EOEnv) -> Option<EO> {
      let eobook = env.find("$.^.book")?;
      let copy = env.copy(eobook)?;
      let eoline = env.find("$.^.line")?;
      env.bind(copy.clone(), eoline, "content")?;
      Some(EOVertex(copy))
    }
    """
    *
      []
  assert-that > @
    applied.content
    $.equal-to
      "qwerty"
