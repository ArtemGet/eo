# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EcounterPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# Test.
# The test may look counter intuitively but this is what's going on here:
# every time when we try to `#take()` attribute from `seq` it goes to its `#lambda()`
# and tries to `#take()` the attribute from returned object.
# This happens 4 times: `seq.lt` here, `seq.minus` inside `float.lt`,
# `seq.plus` inside `float.minus`, `plus.^` inside `float.plus`. It works like that because
# when we #take() `lt` for the first time, its `^` set to `seq`. So when `^.minus` inside `float.lt`
# is called - it's the same as `seq.minus`. And so on with all other left attributes.
# If you don't want to go to `#lambda()` of `seq` every time when you `#take()` the attribute from
# it - just cache it with `!` and wrap with `float`:
# ```
# float > num
#   seq (* ...) > cached!
# ```
# The same story with all other tests in this file. The only difference is in the amount of
# attribute retrievals.
[] > seq-four-dataizations-float-less
  (memory 0.0).alloc > counter
  and. > @
    lt.
      seq
        *
          counter.write
            counter.as-float.plus 1.0
          counter.as-float
      5.0
    counter.free

# Test.
[] > cached-seq-single-dataization-float-less
  (memory 0.0).alloc > counter
  and. > @
    lt.
      float
        seq > cached!
          *
            counter.write (counter.as-float.plus 1.0)
            counter.as-float
      1.1
    counter.free

# Test.
[] > seq-two-dataizations-float-greater
  (memory 0.0).alloc > counter
  and. > @
    gt.
      seq
        *
          counter.write
            counter.as-float.plus 1.0
          counter.as-float
      1.9
    counter.free

# Test.
[] > cached-seq-single-dataization-float-greater
  (memory 0.0).alloc > counter
  and. > @
    gt.
      float
        seq > cached!
          *
            counter.write (counter.as-float.plus 1.0)
            counter.as-float
      0.9
    counter.free

# Test.
[] > seq-four-dataizations-int-less
  (memory 0).alloc > counter
  and. > @
    lt.
      seq
        *
          counter.write
            counter.as-int.plus 1
          counter.as-int
      5
    counter.free

# Test.
[] > cached-seq-single-dataization-int-less
  (memory 0).alloc > counter
  and. > @
    lt.
      int
        seq > cached!
          *
            counter.write (counter.as-int.plus 1)
            counter.as-int
      2
    counter.free

# Test.
[] > seq-four-dataizations-int-less-or-equal
  (memory 0).alloc > counter
  and. > @
    lte.
      seq
        *
          counter.write
            counter.as-int.plus 1
          counter.as-int
      4
    counter.free

# Test.
[] > cached-seq-single-dataization-int-less-or-equal
  (memory 0).alloc > counter
  and. > @
    lte.
      int
        seq > cached!
          *
            counter.write
              counter.as-int.plus 1
            counter.as-int
      1
    counter.free
